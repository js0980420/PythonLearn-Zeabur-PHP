/**
 * WebSocket ÁÆ°ÁêÜÂô® - Â∏∂ HTTP ÈôçÁ¥öÁöÑÁâàÊú¨
 * Áµ±‰∏ÄËôïÁêÜ WebSocket ÈÄ£Êé•ÂíåÊ∂àÊÅØÔºåÊîØÊåÅ HTTP Ê®°ÂºèÈôçÁ¥ö
 */

class WebSocketManager {
    constructor() {
        this.ws = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 3; // Ê∏õÂ∞ëÈáçÈÄ£Ê¨°Êï∏
        this.reconnectDelay = 1000;
        this.messageQueue = [];
        this.eventHandlers = new Map();
        this.httpMode = false; // HTTP ÈôçÁ¥öÊ®°Âºè
        this.pollInterval = null;
        
        // Ëá™ÂãïÊ™¢Ê∏¨ WebSocket URL
        this.wsUrl = this.getWebSocketUrl();
        
        console.log('üîß WebSocket Manager ÂàùÂßãÂåñ');
        console.log('üì° WebSocket URL:', this.wsUrl);
    }
    
    /**
     * Ëá™ÂãïÊ™¢Ê∏¨ WebSocket URL
     */
    getWebSocketUrl() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const host = window.location.host;
        
        // Â∞çÊñº Zeabur ÈÉ®ÁΩ≤Áí∞Â¢É
        if (host.includes('zeabur.app')) {
            return `wss://${host}/ws`;
        }
        
        // Â∞çÊñºÊú¨Âú∞ÈñãÁôºÁí∞Â¢É
        if (host.includes('localhost') || host.includes('127.0.0.1')) {
            return `ws://${host}/ws`;
        }
        
        // ÈªòË™çÈÖçÁΩÆ
        return `${protocol}//${host}/ws`;
    }
    
    /**
     * Âª∫Á´ã WebSocket ÈÄ£Êé•
     */
    async connect() {
        return new Promise((resolve, reject) => {
            try {
                console.log('üîå ÂòóË©¶ÈÄ£Êé• WebSocket:', this.wsUrl);
                
                this.ws = new WebSocket(this.wsUrl);
                
                // Ë®≠ÁΩÆÈÄ£Êé•Ë∂ÖÊôÇ
                const connectionTimeout = setTimeout(() => {
                    console.warn('‚ö†Ô∏è WebSocket ÈÄ£Êé•Ë∂ÖÊôÇÔºåÂàáÊèõÂà∞ HTTP Ê®°Âºè');
                    this.ws.close();
                    this.switchToHttpMode();
                    resolve(true);
                }, 5000); // Ê∏õÂ∞ëË∂ÖÊôÇÊôÇÈñì
                
                this.ws.onopen = () => {
                    clearTimeout(connectionTimeout);
                    this.isConnected = true;
                    this.reconnectAttempts = 0;
                    this.httpMode = false;
                    
                    console.log('‚úÖ WebSocket ÈÄ£Êé•ÊàêÂäü');
                    
                    // ËôïÁêÜÊ∂àÊÅØ‰ΩáÂàó
                    this.processMessageQueue();
                    
                    // Ëß∏ÁôºÈÄ£Êé•ÊàêÂäü‰∫ã‰ª∂
                    this.emit('connected');
                    
                    resolve(true);
                };
                
                this.ws.onmessage = (event) => {
                    this.handleMessage(event.data);
                };
                
                this.ws.onclose = (event) => {
                    clearTimeout(connectionTimeout);
                    this.isConnected = false;
                    console.warn('‚ö†Ô∏è WebSocket ÈÄ£Êé•ÈóúÈñâ:', event.code, event.reason);
                    
                    this.emit('disconnected', { code: event.code, reason: event.reason });
                    
                    // Â¶ÇÊûúÊòØÊ≠£Â∏∏ÈóúÈñâÊàñÈÅîÂà∞ÊúÄÂ§ßÈáçÈÄ£Ê¨°Êï∏ÔºåÂàáÊèõÂà∞ HTTP Ê®°Âºè
                    if (event.code === 1000 || this.reconnectAttempts >= this.maxReconnectAttempts) {
                        console.log('üîÑ ÂàáÊèõÂà∞ HTTP ÈôçÁ¥öÊ®°Âºè');
                        this.switchToHttpMode();
                    } else {
                        this.scheduleReconnect();
                    }
                };
                
                this.ws.onerror = (error) => {
                    clearTimeout(connectionTimeout);
                    console.warn('‚ö†Ô∏è WebSocket ÈÄ£Êé•ÈåØË™§ÔºåÂ∞áÂàáÊèõÂà∞ HTTP Ê®°Âºè');
                    
                    this.emit('error', error);
                    
                    // Á´ãÂç≥ÂàáÊèõÂà∞ HTTP Ê®°ÂºèËÄå‰∏çÊòØÊãíÁµï
                    this.switchToHttpMode();
                    resolve(true);
                };
                
            } catch (error) {
                console.warn('‚ö†Ô∏è WebSocket ÂâµÂª∫Â§±ÊïóÔºåÂàáÊèõÂà∞ HTTP Ê®°Âºè:', error);
                this.switchToHttpMode();
                resolve(true);
            }
        });
    }
    
    /**
     * ÂàáÊèõÂà∞ HTTP ÈôçÁ¥öÊ®°Âºè
     */
    switchToHttpMode() {
        this.httpMode = true;
        this.isConnected = true; // Âú® HTTP Ê®°Âºè‰∏ã‰πüÁÆóÊòØ"ÈÄ£Êé•"
        this.ws = null;
        
        console.log('üì° Â∑≤ÂàáÊèõÂà∞ HTTP ÈôçÁ¥öÊ®°Âºè');
        console.log('‚ÑπÔ∏è ÂäüËÉΩÈôêÂà∂: ÁÑ°ÂØ¶ÊôÇÂêåÊ≠•ÔºåÈúÄÊâãÂãïÂà∑Êñ∞Áç≤ÂèñÊõ¥Êñ∞');
        
        // Ëß∏ÁôºÈÄ£Êé•ÊàêÂäü‰∫ã‰ª∂
        this.emit('connected');
        this.emit('httpModeEnabled');
        
        // ËôïÁêÜÊ∂àÊÅØ‰ΩáÂàó
        this.processMessageQueue();
        
        // ÈñãÂßãËº™Ë©¢ (ÂèØÈÅ∏)
        this.startPolling();
    }
    
    /**
     * ÈñãÂßã HTTP Ëº™Ë©¢
     */
    startPolling() {
        if (this.pollInterval) {
            clearInterval(this.pollInterval);
        }
        
        // ÊØè 30 ÁßíËº™Ë©¢‰∏ÄÊ¨°ÁãÄÊÖã
        this.pollInterval = setInterval(() => {
            if (this.httpMode) {
                this.pollStatus();
            }
        }, 30000);
    }
    
    /**
     * Ëº™Ë©¢ÊúçÂãôÂô®ÁãÄÊÖã
     */
    async pollStatus() {
        try {
            const response = await fetch('/api/status');
            if (response.ok) {
                const status = await response.json();
                this.emit('statusUpdate', status);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è ÁãÄÊÖãËº™Ë©¢Â§±Êïó:', error);
        }
    }
    
    /**
     * ÂÆâÊéíÈáçÈÄ£
     */
    scheduleReconnect() {
        this.reconnectAttempts++;
        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
        
        console.log(`üîÑ Ë®àÂäÉÈáçÈÄ£ (${this.reconnectAttempts}/${this.maxReconnectAttempts}) Âú® ${delay}ms Âæå`);
        
        setTimeout(() => {
            if (!this.isConnected && !this.httpMode) {
                this.connect().catch(error => {
                    console.warn('üîÑ ÈáçÈÄ£Â§±ÊïóÔºåÂàáÊèõÂà∞ HTTP Ê®°Âºè:', error);
                    this.switchToHttpMode();
                });
            }
        }, delay);
    }
    
    /**
     * ÁôºÈÄÅÊ∂àÊÅØ
     */
    async sendMessage(message) {
        return new Promise((resolve, reject) => {
            if (this.httpMode) {
                // HTTP Ê®°ÂºèÔºöÈÄöÈÅé API ÁôºÈÄÅ
                this.sendHttpMessage(message).then(resolve).catch(reject);
                return;
            }
            
            if (!this.isConnected || !this.ws || this.ws.readyState !== WebSocket.OPEN) {
                // Â∞áÊ∂àÊÅØÂä†ÂÖ•‰ΩáÂàó
                this.messageQueue.push({ message, resolve, reject });
                console.warn('‚ö†Ô∏è WebSocket Êú™ÈÄ£Êé•ÔºåÊ∂àÊÅØÂ∑≤Âä†ÂÖ•‰ΩáÂàó');
                return;
            }
            
            try {
                const messageStr = JSON.stringify(message);
                this.ws.send(messageStr);
                console.log('üì§ ÁôºÈÄÅÊ∂àÊÅØ:', message.type);
                resolve(true);
            } catch (error) {
                console.error('‚ùå ÁôºÈÄÅÊ∂àÊÅØÂ§±Êïó:', error);
                reject(error);
            }
        });
    }
    
    /**
     * ÈÄöÈÅé HTTP API ÁôºÈÄÅÊ∂àÊÅØ
     */
    async sendHttpMessage(message) {
        try {
            const response = await fetch('/api/websocket', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(message)
            });
            
            if (response.ok) {
                const result = await response.json();
                console.log('üì§ HTTP Ê∂àÊÅØÁôºÈÄÅÊàêÂäü:', message.type);
                return result;
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è HTTP Ê∂àÊÅØÁôºÈÄÅÂ§±Êïó:', error);
            // Âú® HTTP Ê®°Âºè‰∏ãÔºåÂç≥‰ΩøÁôºÈÄÅÂ§±Êïó‰πü‰∏çÊããÂá∫ÈåØË™§
            return { success: false, error: error.message };
        }
    }
    
    /**
     * ËôïÁêÜÊé•Êî∂Âà∞ÁöÑÊ∂àÊÅØ
     */
    handleMessage(data) {
        try {
            const message = JSON.parse(data);
            console.log('üì• Êî∂Âà∞Ê∂àÊÅØ:', message.type);
            
            // Ëß∏ÁôºÂ∞çÊáâÁöÑ‰∫ã‰ª∂ËôïÁêÜÂô®
            this.emit(message.type, message);
            
            // ÈÄöÁî®Ê∂àÊÅØËôïÁêÜ
            this.emit('message', message);
            
        } catch (error) {
            console.error('‚ùå Ëß£ÊûêÊ∂àÊÅØÂ§±Êïó:', error, data);
        }
    }
    
    /**
     * ËôïÁêÜÊ∂àÊÅØ‰ΩáÂàó
     */
    processMessageQueue() {
        while (this.messageQueue.length > 0) {
            const { message, resolve, reject } = this.messageQueue.shift();
            this.sendMessage(message).then(resolve).catch(reject);
        }
    }
    
    /**
     * Ë®ªÂÜä‰∫ã‰ª∂Áõ£ËÅΩÂô®
     */
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }
    
    /**
     * ÁßªÈô§‰∫ã‰ª∂Áõ£ËÅΩÂô®
     */
    off(event, handler) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }
    
    /**
     * Ëß∏Áôº‰∫ã‰ª∂
     */
    emit(event, data) {
        const handlers = this.eventHandlers.get(event);
        if (handlers) {
            handlers.forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`‚ùå ‰∫ã‰ª∂ËôïÁêÜÂô®ÈåØË™§ (${event}):`, error);
                }
            });
        }
    }
    
    /**
     * ÈóúÈñâÈÄ£Êé•
     */
    disconnect() {
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        
        if (this.pollInterval) {
            clearInterval(this.pollInterval);
            this.pollInterval = null;
        }
        
        this.isConnected = false;
        this.httpMode = false;
        this.reconnectAttempts = this.maxReconnectAttempts; // ÈòªÊ≠¢Ëá™ÂãïÈáçÈÄ£
    }
    
    /**
     * Ê™¢Êü•ÊòØÂê¶Â∑≤ÈÄ£Êé• (ÂåÖÊã¨ HTTP Ê®°Âºè)
     */
    getConnectionStatus() {
        return this.isConnected;
    }
    
    /**
     * Áç≤ÂèñÈÄ£Êé•ÁãÄÊÖã
     */
    getConnectionState() {
        return {
            isConnected: this.isConnected,
            httpMode: this.httpMode,
            reconnectAttempts: this.reconnectAttempts,
            queuedMessages: this.messageQueue.length,
            wsUrl: this.wsUrl
        };
    }
}

// ÂâµÂª∫ÂÖ®Âüü WebSocket ÁÆ°ÁêÜÂô®ÂØ¶‰æã
window.wsManager = new WebSocketManager();

// Áõ£ËÅΩ HTTP Ê®°ÂºèÂàáÊèõ
window.wsManager.on('httpModeEnabled', () => {
    // È°ØÁ§∫ HTTP Ê®°ÂºèÁãÄÊÖãÊåáÁ§∫Âô®
    setTimeout(() => {
        if (window.UI && typeof window.UI.showHttpModeStatus === 'function') {
            window.UI.showHttpModeStatus();
        } else if (window.UI && typeof window.UI.showWarningToast === 'function') {
            window.UI.showWarningToast('Â∑≤ÂàáÊèõÂà∞ HTTP Ê®°ÂºèÔºåÈÉ®ÂàÜÂØ¶ÊôÇÂäüËÉΩÂèóÈôê');
        } else {
            console.warn('‚ö†Ô∏è Áï∂ÂâçÁÇ∫ HTTP Ê®°ÂºèÔºåÁÑ°Ê≥ïÊèê‰æõÂØ¶ÊôÇÂçî‰ΩúÂäüËÉΩ');
        }
    }, 1000); // Âª∂ÈÅ≤È°ØÁ§∫ÔºåÁ¢∫‰øù UI Â∑≤ËºâÂÖ•
});

// Ëá™ÂãïÈÄ£Êé•
window.wsManager.connect().catch(error => {
    console.warn('‚ö†Ô∏è ÂàùÂßãÈÄ£Êé•Â§±ÊïóÔºåÂ∑≤ÂàáÊèõÂà∞ HTTP Ê®°Âºè:', error);
});

console.log('‚úÖ WebSocket ÁÆ°ÁêÜÂô®Â∑≤ËºâÂÖ• (ÊîØÊåÅ HTTP ÈôçÁ¥ö)'); 